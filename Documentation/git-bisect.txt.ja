//// (1) For example, `git bisect reset HEAD` ...
////   の訳がちょっと怪しい気がしています、後で直すかもしれません。
////   上手く挙動も再現出来ていないので、いまいち自信がないです。
////
//// (2) "revision that does not have this commit needs ...
////   も、同じく自信がないので時間をおいてまた考えてみます。
////   こちらは、言いたいことはずれていないと思いつつ、上手く訳せない感じです。

git-bisect(1)
=============
// = git-bisect(1)

NAME
----
// == NAME
git-bisect - Find by binary search the change that introduced a bug
// git-bisect - バグの発生した変更箇所を、二分探索で見つける

SYNOPSIS
--------
// == SYNOPSIS
'git bisect' <subcommand> <options>
// 'git bisect' <subcommand> <options>

DESCRIPTION
-----------
// == DESCRIPTION
The command takes various subcommands, and different options depending
on the subcommand:
// このコマンドは様々なサブコマンドと、それに関連した異なるオプションを取ります

 git bisect help
 git bisect start [<bad> [<good>...]] [--] [<paths>...]
 git bisect bad [<rev>]
 git bisect good [<rev>...]
 git bisect skip [(<rev>|<range>)...]
 git bisect reset [<commit>]
 git bisect visualize
 git bisect replay <logfile>
 git bisect log
 git bisect run <cmd>...
//  git bisect help
//  git bisect start [<bad> [<good>...]] [--] [<paths>...]
//  git bisect bad [<rev>]
//  git bisect good [<rev>...]
//  git bisect skip [(<rev>|<range>)...]
//  git bisect reset [<commit>]
//  git bisect visualize
//  git bisect replay <logfile>
//  git bisect log
//  git bisect run <cmd>...

This command uses 'git rev-list --bisect' to help drive the
binary search process to find which change introduced a bug, given an
old "good" commit object name and a later "bad" commit object name.
// このコマンドは'git rev-list --bisect'を利用して、
// 与えられた過去の"正常な"コミットと、それより後に起きた"不正な"コミットを渡して
// 二分探索によりバグの発生した変更を探すのを手伝ってくれます。

Getting help
~~~~~~~~~~~~
// === ヘルプの使い方

Use "git bisect" to get a short usage description, and "git bisect
help" or "git bisect -h" to get a long usage description.
// "git bisect" は短い使い方の説明を得るのに使われ、
// "git bisect help" または "git bisect -h" は長い使い方の説明を得るのに使われます。

Basic bisect commands: start, bad, good
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// === 基本的なbisectコマンド: start, bad, good

Using the Linux kernel tree as an example, basic use of the bisect
command is as follows:
// 例として、Linuxカーネルツリーに使ってみます、
// 基本的なbisectコマンドの使い方は下のようになります。

------------------------------------------------
$ git bisect start
$ git bisect bad                 # Current version is bad
//                               # 現在のバージョンは駄目
$ git bisect good v2.6.13-rc2    # v2.6.13-rc2 was the last version
//                               # タグ v2.6.13-rc2 は、テストが成功した
                                 # tested that was good
//                               # 一番最後のバージョン
------------------------------------------------

When you have specified at least one bad and one good version, the
command bisects the revision tree and outputs something similar to
the following:
// あなたがすくなくとも１つづつ失敗と成功のリビジョンを指定すると、
// bisect コマンドはリビジョンツリーを分割し、下記のようなメッセージを出力します。

------------------------------------------------
Bisecting: 675 revisions left to test after this
// # 訳注："分割中: テストするリビジョンは残り675件" という意味
------------------------------------------------

The state in the middle of the set of revisions is then checked out.
You would now compile that kernel and boot it. If the booted kernel
works correctly, you would then issue the following command:
// メッセージ出力後、good と bad の中間に位置するリビジョンがチェックアウトされます。
// そうしたら、ただちにカーネルをコンパイル、実行してみましょう。
// もしカーネルが正しく動作したら、以下のコマンドを入力します。

------------------------------------------------
$ git bisect good			# this one is good
//					# これはOK
------------------------------------------------

The output of this command would be something similar to the following:
// コマンドの出力は以下のようなものになるでしょう:

------------------------------------------------
Bisecting: 337 revisions left to test after this
// # 訳注："分割中 : テストするリビジョンは残り337件" という意味
------------------------------------------------

You keep repeating this process, compiling the tree, testing it, and
depending on whether it is good or bad issuing the command "git bisect good"
or "git bisect bad" to ask for the next bisection.
// ツリーをコンパイル、テストし、成功か失敗に応じて、
// "git bisect good" もしくは "git bisect bad" を発行し、
// 次の二分先を決定するというプロセスを繰り返します。

Eventually there will be no more revisions left to bisect, and you
will have been left with the first bad kernel revision in "refs/bisect/bad".
// 最終的に、これ以上リビジョンを分割出来ない状態になります。
// そして、"refs/bisect/bad"には最初に悪い状態になったカーネルのリビジョンが残されているでしょう。

Bisect reset
~~~~~~~~~~~~
// === Bisect reset

After a bisect session, to clean up the bisection state and return to
the original HEAD, issue the following command:
// bisectセッションの後に、二分された状態を元に戻し
// 最初のHEADに戻るためには、以下のコマンドを実行して下さい:

------------------------------------------------
$ git bisect reset
------------------------------------------------

By default, this will return your tree to the commit that was checked
out before `git bisect start`.  (A new `git bisect start` will also do
that, as it cleans up the old bisection state.)
// 通常、これは`git bisect start`する前に取り出されていたコミット状態に
// あなたのツリーを戻すでしょう。(また、新しい`git bisect start`した場合でも、
// 古い二分状態はクリーンアップされるでしょう.)

With an optional argument, you can return to a different commit
instead:
// オプションの引数を指定する場合は、代わりに別のコミットに戻すことが出来ます。

------------------------------------------------
$ git bisect reset <commit>
------------------------------------------------

For example, `git bisect reset HEAD` will leave you on the current
bisection commit and avoid switching commits at all, while `git bisect
reset bisect/bad` will check out the first bad revision.
// 例を挙げると、`git bisect reset HEAD` は現在のbisectコミットを残したまま、
// 切り替えていったコミットを全て無効にします。
// `git bisect reset bisect/bad` は最初にbadマークを付けたリビジョンをチェックアウトします。

Bisect visualize
~~~~~~~~~~~~~~~~
// === Bisectの視覚化

To see the currently remaining suspects in 'gitk', issue the following
command during the bisection process:
// 'gitk'を使って現在の疑わしい候補の残りを見るには、
// bisectを実行中に下のコマンドを実行して下さい。

------------
$ git bisect visualize
------------

`view` may also be used as a synonym for `visualize`.
// `view` も`visualize`の同義語として使用することが出来ます。

If the 'DISPLAY' environment variable is not set, 'git log' is used
instead.  You can also give command line options such as `-p` and
`--stat`.
// もし'DISPLAY'環境変数が設定されていなければ、代わりに'git log'が使われます。
// 同様のことは `-p` や `--stat` をオプションとして与えることで出来ます。

------------
$ git bisect view --stat
------------

Bisect log and bisect replay
~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// === Bisectのログとリプレイ

After having marked revisions as good or bad, issue the following
command to show what has been done so far:
// goodもしくはbadマークを付けた後、
// 何がどのように行われたかを見るには下記のコマンドを実行します:

------------
$ git bisect log
------------

If you discover that you made a mistake in specifying the status of a
revision, you can save the output of this command to a file, edit it to
remove the incorrect entries, and then issue the following commands to
return to a corrected state:
// もしあるリビジョンの状態指定に間違えを発見したら、このコマンドの出力をファイルに保存し、
// 間違えたエントリを削除して編集し、それから下記のコマンドを実行すると正しい状態へ戻ります。

------------
$ git bisect reset
$ git bisect replay that-file
------------

Avoiding testing a commit
~~~~~~~~~~~~~~~~~~~~~~~~~
// === コミットテストを回避する

If, in the middle of a bisect session, you know that the next suggested
revision is not a good one to test (e.g. the change the commit
introduces is known not to work in your environment and you know it
does not have anything to do with the bug you are chasing), you may
want to find a nearby commit and try that instead.
// もしbisectの途中で、次に提案されたリビジョンがテストに良いものでないことが
// 分かっている場合(例えば、そのコミットの変更によりあなたの環境で動かなくなり、
// それが追っているバグと関係がないということが分かっている時)、
// その近くのコミットを見つけ代用したいとします。

For example:
// 例:

------------
$ git bisect good/bad			# previous round was good or bad.
//					# 前回は good か bad
Bisecting: 337 revisions left to test after this
$ git bisect visualize			# oops, that is uninteresting.
//					# おっと、こいつはやりづらいな 
$ git reset --hard HEAD~3		# try 3 revisions before what
//					# 3つ前のバージョンで
					# was suggested
//					# 試してみよう
------------

Then compile and test the chosen revision, and afterwards mark
the revision as good or bad in the usual manner.
// それから指定されたリビジョンでコンパイルとテストを行い、
// その後、いつも通りgoodまたはbadマークをリビジョンに設定します。

Bisect skip
~~~~~~~~~~~~
// === Bisect skip

Instead of choosing by yourself a nearby commit, you can ask git
to do it for you by issuing the command:
// 近くのコミットを自分自身で選択する代わりに、このコマンドによってgitに頼むことが出来ます。

------------
$ git bisect skip                 # Current version cannot be tested
//                                # このバージョンはテストすることが出来ない
------------

But git may eventually be unable to tell the first bad commit among
a bad commit and one or more skipped commits.
// しかし最初のbadコミットとの間に、badコミットや、
// 一つないしそれ以上のskipコミットがあると、
// gitは結局の所、それは出来ないと伝えてくるかもしれません。

You can even skip a range of commits, instead of just one commit,
using the "'<commit1>'..'<commit2>'" notation. For example:
// また、ある特定のコミット範囲をスキップすることが出来ます。
// 一つのコミットを指定する代わりに、"'<commit1>'..'<commit2>'"表記を使います。例:

------------
$ git bisect skip v2.5..v2.6
------------

This tells the bisect process that no commit after `v2.5`, up to and
including `v2.6`, should be tested.
// これは、`v2.5`(含まない)から`v2.6`(含む)以外を
// テストするようbisectプロセスに 伝えます。

Note that if you also want to skip the first commit of the range you
would issue the command:
// もし最初のコミットもスキップする範囲に含めたい場合は、
// 下のコマンドを実行する必要があることに注意して下さい。

------------
$ git bisect skip v2.5 v2.5..v2.6
------------

This tells the bisect process that the commits between `v2.5` included
and `v2.6` included should be skipped.
// これは、`v2.5`(含む)から`v2.6`(含む)をスキップするようbisectプロセスに 伝えます。

Cutting down bisection by giving more parameters to bisect start
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// === bisect start にたくさんのパラメータを与え、分割量を縮小する

You can further cut down the number of trials, if you know what part of
the tree is involved in the problem you are tracking down, by specifying
path parameters when issuing the `bisect start` command:
// もっとテストする回数を少なくすることが出来ます、
// 問題がツリー(訳注: ディレクトリツリーのこと) のどの部分で起きているかが分かっていれば、
// `bisect start` コマンドを実行する際、ファイルパスをパラメータに渡すことが出来ます。

------------
$ git bisect start -- arch/i386 include/asm-i386
------------

If you know beforehand more than one good commit, you can narrow the
bisect space down by specifying all of the good commits immediately after
the bad commit when issuing the `bisect start` command:
// もし事前に正しいコミットがもっと分かっていれば、分割領域を絞り込むことが出来ます。
// `bisect start` コマンドを発行する際に指定するbadコミットの直後に、
// 全てのgoodコミットを指定するのです。

------------
$ git bisect start v2.6.20-rc6 v2.6.20-rc4 v2.6.20-rc1 --
                   # v2.6.20-rc6 is bad
//                 # v2.6.20-rc6 は正しくない
                   # v2.6.20-rc4 and v2.6.20-rc1 are good
//                 # v2.6.20-rc4 と v2.6.20-rc1 は正しい
------------

Bisect run
~~~~~~~~~~
// === Bisect run

If you have a script that can tell if the current source code is good
or bad, you can bisect by issuing the command:
// もし、現在のソースコードが正しいか悪いかを教えてくれるスクリプトがあれば、
// このコマンドを使ってbisectを実行することが出来ます。

------------
$ git bisect run my_script arguments
------------

Note that the script (`my_script` in the above example) should
exit with code 0 if the current source code is good, and exit with a
code between 1 and 127 (inclusive), except 125, if the current
source code is bad.
// スクリプト(上記の例では`my_script`)は
// 現在のソースコードが正しい場合は0を、
// もし現在のソースコードが正しくない場合は、exitコードに125をのぞいた
// 1から127(含む)を終了コードとして返す必要があることに注意してください。

Any other exit code will abort the bisect process. It should be noted
that a program that terminates via "exit(-1)" leaves $? = 255, (see the
exit(3) manual page), as the value is chopped with "& 0377".
// それ以外の終了コードの場合は、bisectプロセスが強制終了するでしょう。
// プログラムが "exit(-1)"で終了した場合、"& 0377"でマスクされ、
// $? == 255(訳注: $?はunix等でプログラムの終了コードが格納される環境変数のこと)
// になることに注意して下さい。(exit(3)のmanページを見て下さい)

The special exit code 125 should be used when the current source code
cannot be tested. If the script exits with this code, the current
revision will be skipped (see `git bisect skip` above).
// 特殊な終了コード125は、現在のソースコードがテスト出来ない時に使用して下さい。
// このコードを使用してスクリプトを終了すると、現在のリビジョンはスキップされます。
// (上記の`git bisect skip`を見て下さい)

You may often find that during a bisect session you want to have
temporary modifications (e.g. s/#define DEBUG 0/#define DEBUG 1/ in a
header file, or "revision that does not have this commit needs this
patch applied to work around another problem this bisection is not
interested in") applied to the revision being tested.
// 時折、分割テストをするリビジョンに一時的な変更を加えたくなるでしょう。
// (例えば s/#define 0/#define 1/をヘッダーファイルに適用したり、
//  "リビジョンにコミットしない、今回のbisectにはあまり関係のない他の問題のためのパッチが必要です。")

To cope with such a situation, after the inner 'git bisect' finds the
next revision to test, the script can apply the patch
before compiling, run the real test, and afterwards decide if the
revision (possibly with the needed patch) passed the test and then
rewind the tree to the pristine state.  Finally the script should exit
with the status of the real test to let the "git bisect run" command loop
determine the eventual outcome of the bisect session.
// このような状況に対処するためには、
// 'git bisect'の中で次のテストするべきリビジョンが見つかった後、
// コンパイル、テストを行う前に、スクリプトがパッチを与えることが出来ます。
// そして、最終的にそのリビジョン(場合によっては必要なパッチを決定して)
// でテストをパスするか判断し、元の状態にツリーを戻します。
// 最後に、スクリプトは"git bisect run"コマンドループが今回の分割の結果を
// 判断させるための、実質的なテスト結果を終了時に渡します。

EXAMPLES
--------
// == EXAMPLES

* Automatically bisect a broken build between v1.2 and HEAD:
// * v1.2 と HEAD の間でビルドに失敗している部分を自動で二分探索
+
// +
------------
$ git bisect start HEAD v1.2 --      # HEAD is bad, v1.2 is good
//                                   # HEADは駄目, v1.2は大丈夫
$ git bisect run make                # "make" builds the app
//                                   # "make"でアプリをビルド
------------

* Automatically bisect a test failure between origin and HEAD:
// * originとHEADの間で、テストに失敗している部分を自動で二分探索
+
// +
------------
$ git bisect start HEAD origin --    # HEAD is bad, origin is good
//                                   # HEADは駄目, originは大丈夫
$ git bisect run make test           # "make test" builds and tests
//                                   # "make test" でビルドとテスト
------------

* Automatically bisect a broken test suite:
// * テストが壊れていても、自動で二分探索
+
// +
------------
$ cat ~/test.sh
#!/bin/sh
make || exit 125                   # this skips broken builds
//                                 # ビルドに失敗したらスキップ
make test                          # "make test" runs the test suite
//                                 # "make test" テストスイートを実行
$ git bisect start v1.3 v1.1 --    # v1.3 is bad, v1.1 is good
//                                 # v1.3は駄目, v1.1は大丈夫
$ git bisect run ~/test.sh
------------
+
Here we use a "test.sh" custom script. In this script, if "make"
fails, we skip the current commit.
// +
// この例では、"test.sh"というカスタムスクリプトを使っています。
// このスクリプトは、"make"に失敗したらこのコミットはスキップします
+
It is safer to use a custom script outside the repository to prevent
interactions between the bisect, make and test processes and the
script.
// +
// bisect, make, test プロセスと スクリプトとの相互作用を防ぐために、
// カスタムスクリプトを使用する時はレポジトリの管理外にある方が安全です。
+
"make test" should "exit 0", if the test suite passes, and
"exit 1" otherwise.
// +
// もしテストに合格すれば "make test" は "exit 0" を, そうでなければ
// "exit 1" を返します。

* Automatically bisect a broken test case:
// * 壊れたテストケースを自動で二分探索
+
// +
------------
$ cat ~/test.sh
#!/bin/sh
make || exit 125                     # this skips broken builds
//                                   # ビルドに失敗したらスキップ
~/check_test_case.sh                 # does the test case passes ?
//                                   # テストケースをパスする？
$ git bisect start HEAD HEAD~10 --   # culprit is among the last 10
//                                   # 原因は最後の10個に
$ git bisect run ~/test.sh
------------
+
Here "check_test_case.sh" should "exit 0" if the test case passes,
and "exit 1" otherwise.
// +
// ここで "check_test_case.sh" はテストに合格すれば "exit 0" を、そうでなければ 
// "exit 1" を返します。
+
It is safer if both "test.sh" and "check_test_case.sh" scripts are
outside the repository to prevent interactions between the bisect,
make and test processes and the scripts.
// +
// bisect, make, test プロセスと スクリプトとの相互作用を防ぐために、
// "test.sh"と"check_test_case.sh"はレポジトリの管理外にある方がより安全です。

* Automatically bisect a broken test suite:
// * 壊れたテストスイートを自動で二分探索
+
// +
------------
$ git bisect start HEAD HEAD~10 --   # culprit is among the last 10
//                                   # 原因は最後の10個に
$ git bisect run sh -c "make || exit 125; ~/check_test_case.sh"
------------
+
Does the same as the previous example, but on a single line.
// +
// 以前の例と同じですが、これなら一行で書けます。

Author
------
// == Author
Written by Linus Torvalds <torvalds@osdl.org>
// このプログラムは Linus Torvalds <torvalds@osdl.org> よって書かれました。

Documentation
-------------
// == Documentation
Documentation by Junio C Hamano and the git-list <git@vger.kernel.org>.
// このドキュメントは Junio C Hamano と git-list <git@vger.kernel.org> 有志によって書かれました。

SEE ALSO
--------
// == SEE ALSO
link:git-bisect-lk2009.html[Fighting regressions with git bisect],
linkgit:git-blame[1].
// link:git-bisect-lk2009.html[git bisect による復帰への戦い],
// linkgit:git-blame[1].

GIT
---
// == GIT
Part of the linkgit:git[1] suite
// このコマンドは linkgit:git[1] スイートの一部です。
